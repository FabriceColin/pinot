/* GoogleSearch.h
   Generated by wsdl2h 1.2.10 from googleapi/GoogleSearch.wsdl and typemap.dat
   2008-08-03 16:08:14 GMT
   Copyright (C) 2001-2008 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'WS/typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * urn:GoogleSearch                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

gapi1 = "urn:GoogleSearch"

*/

//gsoap gapi1 schema namespace:	urn:GoogleSearch
//gsoap gapi1 schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/


/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};


//  Forward declaration of class gapi1__GoogleSearchResult.
class gapi1__GoogleSearchResult;

//  Forward declaration of class gapi1__ResultElement.
class gapi1__ResultElement;

//  Forward declaration of class gapi1ResultElementArray.
class gapi1ResultElementArray;

//  Forward declaration of class gapi1DirectoryCategoryArray.
class gapi1DirectoryCategoryArray;

//  Forward declaration of class gapi1__DirectoryCategory.
class gapi1__DirectoryCategory;

/// "urn:GoogleSearch":GoogleSearchResult is a complexType.
class gapi1__GoogleSearchResult
{ public:
/// Element documentFiltering of type xs:boolean.
    bool                                 documentFiltering              1;	///< Required element.
/// Element searchComments of type xs:string.
    std::string                          searchComments                 1;	///< Required element.
/// Element estimatedTotalResultsCount of type xs:int.
    int                                  estimatedTotalResultsCount     1;	///< Required element.
/// Element estimateIsExact of type xs:boolean.
    bool                                 estimateIsExact                1;	///< Required element.
/// Element resultElements of type "urn:GoogleSearch":ResultElementArray.
    gapi1ResultElementArray*             resultElements                 1;	///< Required element.
/// Element searchQuery of type xs:string.
    std::string                          searchQuery                    1;	///< Required element.
/// Element startIndex of type xs:int.
    int                                  startIndex                     1;	///< Required element.
/// Element endIndex of type xs:int.
    int                                  endIndex                       1;	///< Required element.
/// Element searchTips of type xs:string.
    std::string                          searchTips                     1;	///< Required element.
/// Element directoryCategories of type "urn:GoogleSearch":DirectoryCategoryArray.
    gapi1DirectoryCategoryArray*         directoryCategories            1;	///< Required element.
/// Element searchTime of type xs:double.
    double                               searchTime                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:GoogleSearch":ResultElement is a complexType.
class gapi1__ResultElement
{ public:
/// Element summary of type xs:string.
    std::string                          summary                        1;	///< Required element.
/// Element URL of type xs:string.
    std::string                          URL                            1;	///< Required element.
/// Element snippet of type xs:string.
    std::string                          snippet                        1;	///< Required element.
/// Element title of type xs:string.
    std::string                          title                          1;	///< Required element.
/// Element cachedSize of type xs:string.
    std::string                          cachedSize                     1;	///< Required element.
/// Element relatedInformationPresent of type xs:boolean.
    bool                                 relatedInformationPresent      1;	///< Required element.
/// Element hostName of type xs:string.
    std::string                          hostName                       1;	///< Required element.
/// Element directoryCategory of type "urn:GoogleSearch":DirectoryCategory.
    gapi1__DirectoryCategory*            directoryCategory              1;	///< Required element.
/// Element directoryTitle of type xs:string.
    std::string                          directoryTitle                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:GoogleSearch":DirectoryCategory is a complexType.
class gapi1__DirectoryCategory
{ public:
/// Element fullViewableName of type xs:string.
    std::string                          fullViewableName               1;	///< Required element.
/// Element specialEncoding of type xs:string.
    std::string                          specialEncoding                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:GoogleSearch":ResultElementArray is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "urn:GoogleSearch":ResultElement
class gapi1ResultElementArray
{ public:
/// Pointer to array of gapi1__ResultElement*.
    gapi1__ResultElement*               *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:GoogleSearch":DirectoryCategoryArray is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "urn:GoogleSearch":DirectoryCategory
class gapi1DirectoryCategoryArray
{ public:
/// Pointer to array of gapi1__DirectoryCategory*.
    gapi1__DirectoryCategory*           *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap gapi1 service name:	GoogleSearchBinding 
//gsoap gapi1 service type:	GoogleSearchPort 
//gsoap gapi1 service port:	http://api.google.com/search/beta2 
//gsoap gapi1 service namespace:	urn:GoogleSearch 
//gsoap gapi1 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage GoogleSearch Definitions

@section GoogleSearch_bindings Bindings
  - @ref GoogleSearchBinding

*/

/**

@page GoogleSearchBinding Binding "GoogleSearchBinding"

@section GoogleSearchBinding_operations Operations of Binding  "GoogleSearchBinding"
  - @ref gapi1__doGetCachedPage
  - @ref gapi1__doSpellingSuggestion
  - @ref gapi1__doGoogleSearch

@section GoogleSearchBinding_ports Endpoints of Binding  "GoogleSearchBinding"
  - http://api.google.com/search/beta2

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * GoogleSearchBinding                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * gapi1__doGetCachedPage                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "gapi1__doGetCachedPage" of service binding "GoogleSearchBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="urn:GoogleSearchAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_gapi1__doGetCachedPage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         key,
    std::string                         url,
    // response parameters:
    xsd__base64Binary                  &return_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int gapi1__doGetCachedPage(
    struct soap *soap,
    // request parameters:
    std::string                         key,
    std::string                         url,
    // response parameters:
    xsd__base64Binary                  &return_
  );
@endcode

C++ proxy class (defined in soapGoogleSearchBindingProxy.h):
  class GoogleSearchBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap gapi1 service method-style:	doGetCachedPage rpc
//gsoap gapi1 service method-encoding:	doGetCachedPage http://schemas.xmlsoap.org/soap/encoding/
//gsoap gapi1 service method-action:	doGetCachedPage urn:GoogleSearchAction
int gapi1__doGetCachedPage(
    std::string                         key,	///< Request parameter
    std::string                         url,	///< Request parameter
    xsd__base64Binary                  &return_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * gapi1__doSpellingSuggestion                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "gapi1__doSpellingSuggestion" of service binding "GoogleSearchBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="urn:GoogleSearchAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_gapi1__doSpellingSuggestion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         key,
    std::string                         phrase,
    // response parameters:
    std::string                        &return_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int gapi1__doSpellingSuggestion(
    struct soap *soap,
    // request parameters:
    std::string                         key,
    std::string                         phrase,
    // response parameters:
    std::string                        &return_
  );
@endcode

C++ proxy class (defined in soapGoogleSearchBindingProxy.h):
  class GoogleSearchBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap gapi1 service method-style:	doSpellingSuggestion rpc
//gsoap gapi1 service method-encoding:	doSpellingSuggestion http://schemas.xmlsoap.org/soap/encoding/
//gsoap gapi1 service method-action:	doSpellingSuggestion urn:GoogleSearchAction
int gapi1__doSpellingSuggestion(
    std::string                         key,	///< Request parameter
    std::string                         phrase,	///< Request parameter
    std::string                        &return_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * gapi1__doGoogleSearch                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "gapi1__doGoogleSearchResponse" of service binding "GoogleSearchBinding" operation "gapi1__doGoogleSearch"
struct gapi1__doGoogleSearchResponse
{
    gapi1__GoogleSearchResult*          return_;
};

/// Operation "gapi1__doGoogleSearch" of service binding "GoogleSearchBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP action="urn:GoogleSearchAction"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_gapi1__doGoogleSearch(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         key,
    std::string                         q,
    int                                 start,
    int                                 maxResults,
    bool                                filter,
    std::string                         restrict_,
    bool                                safeSearch,
    std::string                         lr,
    std::string                         ie,
    std::string                         oe,
    // response parameters:
    struct gapi1__doGoogleSearchResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int gapi1__doGoogleSearch(
    struct soap *soap,
    // request parameters:
    std::string                         key,
    std::string                         q,
    int                                 start,
    int                                 maxResults,
    bool                                filter,
    std::string                         restrict_,
    bool                                safeSearch,
    std::string                         lr,
    std::string                         ie,
    std::string                         oe,
    // response parameters:
    struct gapi1__doGoogleSearchResponse&
  );
@endcode

C++ proxy class (defined in soapGoogleSearchBindingProxy.h):
  class GoogleSearchBinding;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap gapi1 service method-style:	doGoogleSearch rpc
//gsoap gapi1 service method-encoding:	doGoogleSearch http://schemas.xmlsoap.org/soap/encoding/
//gsoap gapi1 service method-action:	doGoogleSearch urn:GoogleSearchAction
int gapi1__doGoogleSearch(
    std::string                         key,	///< Request parameter
    std::string                         q,	///< Request parameter
    int                                 start,	///< Request parameter
    int                                 maxResults,	///< Request parameter
    bool                                filter,	///< Request parameter
    std::string                         restrict_,	///< Request parameter
    bool                                safeSearch,	///< Request parameter
    std::string                         lr,	///< Request parameter
    std::string                         ie,	///< Request parameter
    std::string                         oe,	///< Request parameter
    struct gapi1__doGoogleSearchResponse&	///< Response struct parameter
);

/* End of GoogleSearch.h */
