/* GAPIClient.cpp
   Generated by gSOAP 2.7.10 from GoogleSearch.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "GAPIH.h"

SOAP_SOURCE_STAMP("@(#) GAPIClient.cpp ver 2.7.10 2008-08-04 14:27:08 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_gapi1__doGetCachedPage(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string key, std::string url, xsd__base64Binary &return_)
{	struct gapi1__doGetCachedPage soap_tmp_gapi1__doGetCachedPage;
	struct gapi1__doGetCachedPageResponse *soap_tmp_gapi1__doGetCachedPageResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://api.google.com/search/beta2";
	if (!soap_action)
		soap_action = "urn:GoogleSearchAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_gapi1__doGetCachedPage.key = key;
	soap_tmp_gapi1__doGetCachedPage.url = url;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_gapi1__doGetCachedPage(soap, &soap_tmp_gapi1__doGetCachedPage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_gapi1__doGetCachedPage(soap, &soap_tmp_gapi1__doGetCachedPage, "gapi1:doGetCachedPage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_gapi1__doGetCachedPage(soap, &soap_tmp_gapi1__doGetCachedPage, "gapi1:doGetCachedPage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&return_)
		return soap_closesock(soap);
	return_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_gapi1__doGetCachedPageResponse = soap_get_gapi1__doGetCachedPageResponse(soap, NULL, "gapi1:doGetCachedPageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_gapi1__doGetCachedPageResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_gapi1__doSpellingSuggestion(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string key, std::string phrase, std::string &return_)
{	struct gapi1__doSpellingSuggestion soap_tmp_gapi1__doSpellingSuggestion;
	struct gapi1__doSpellingSuggestionResponse *soap_tmp_gapi1__doSpellingSuggestionResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://api.google.com/search/beta2";
	if (!soap_action)
		soap_action = "urn:GoogleSearchAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_gapi1__doSpellingSuggestion.key = key;
	soap_tmp_gapi1__doSpellingSuggestion.phrase = phrase;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_gapi1__doSpellingSuggestion(soap, &soap_tmp_gapi1__doSpellingSuggestion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_gapi1__doSpellingSuggestion(soap, &soap_tmp_gapi1__doSpellingSuggestion, "gapi1:doSpellingSuggestion", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_gapi1__doSpellingSuggestion(soap, &soap_tmp_gapi1__doSpellingSuggestion, "gapi1:doSpellingSuggestion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_gapi1__doSpellingSuggestionResponse = soap_get_gapi1__doSpellingSuggestionResponse(soap, NULL, "gapi1:doSpellingSuggestionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_gapi1__doSpellingSuggestionResponse->return_;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_gapi1__doGoogleSearch(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string key, std::string q, int start, int maxResults, bool filter, std::string restrict_, bool safeSearch, std::string lr, std::string ie, std::string oe, struct gapi1__doGoogleSearchResponse &_param_1)
{	struct gapi1__doGoogleSearch soap_tmp_gapi1__doGoogleSearch;
	if (!soap_endpoint)
		soap_endpoint = "http://api.google.com/search/beta2";
	if (!soap_action)
		soap_action = "urn:GoogleSearchAction";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_gapi1__doGoogleSearch.key = key;
	soap_tmp_gapi1__doGoogleSearch.q = q;
	soap_tmp_gapi1__doGoogleSearch.start = start;
	soap_tmp_gapi1__doGoogleSearch.maxResults = maxResults;
	soap_tmp_gapi1__doGoogleSearch.filter = filter;
	soap_tmp_gapi1__doGoogleSearch.restrict_ = restrict_;
	soap_tmp_gapi1__doGoogleSearch.safeSearch = safeSearch;
	soap_tmp_gapi1__doGoogleSearch.lr = lr;
	soap_tmp_gapi1__doGoogleSearch.ie = ie;
	soap_tmp_gapi1__doGoogleSearch.oe = oe;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_gapi1__doGoogleSearch(soap, &soap_tmp_gapi1__doGoogleSearch);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_gapi1__doGoogleSearch(soap, &soap_tmp_gapi1__doGoogleSearch, "gapi1:doGoogleSearch", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_gapi1__doGoogleSearch(soap, &soap_tmp_gapi1__doGoogleSearch, "gapi1:doGoogleSearch", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_gapi1__doGoogleSearchResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_gapi1__doGoogleSearchResponse(soap, &_param_1, "gapi1:doGoogleSearchResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

/* End of GAPIClient.cpp */
