// generated 2011/1/2 21:12:23 SGT by fabrice@rexor.dyndns.org.(none)
// using glademm V2.12.1
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/fabrice/Projects/MetaSE/pinot/UI/GTK2/metase-gtk2.glade
// for gtk 2.14.5 and gtkmm 2.14.3
//
// Please modify the corresponding derived classes in ./src/mainWindow.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/sigc++.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "mainWindow_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/stock.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/image.h>
#include <gtkmm/box.h>
#include <gtkmm/label.h>
#include <gtkmm/buttonbox.h>
#include <gtkmm/scrolledwindow.h>
#ifndef ENABLE_NLS
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif


mainWindow_glade::mainWindow_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  mainWindow = this;
   gmm_data = new GlademmData(get_accel_group());
   
   enginesVbox = Gtk::manage(new class Gtk::VBox(false, 0));
   
   Gtk::Image *image439 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
   addIndexButton = Gtk::manage(new class Gtk::Button());
   
   Gtk::Image *image438 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-remove"), Gtk::IconSize(4)));
   removeIndexButton = Gtk::manage(new class Gtk::Button());
   
   Gtk::HBox *indexHbox = Gtk::manage(new class Gtk::HBox(true, 4));
   leftVbox = Gtk::manage(new class Gtk::VBox(false, 0));
   
   Gtk::Image *image623 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-network"), Gtk::IconSize(4)));
   enginesTogglebutton = Gtk::manage(new class Gtk::ToggleButton());
   
   Gtk::Label *liveQueryLabel = Gtk::manage(new class Gtk::Label(_("Query:")));
   liveQueryEntry = Gtk::manage(new class Gtk::Entry());
   findButton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-find")));
   
#if GTK_VERSION_LT(3, 0)
   Gtk::VButtonBox *findVbuttonbox = Gtk::manage(new class Gtk::VButtonBox(Gtk::BUTTONBOX_DEFAULT_STYLE, 0));
#else
   Gtk::VButtonBox *findVbuttonbox = Gtk::manage(new class Gtk::VButtonBox());
#endif
   Gtk::HBox *liveQueryHbox = Gtk::manage(new class Gtk::HBox(false, 0));
   queryTreeview = Gtk::manage(new class Gtk::TreeView());
   
   Gtk::ScrolledWindow *queryScrolledwindow = Gtk::manage(new class Gtk::ScrolledWindow());
   addQueryButton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-add")));
   removeQueryButton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-remove")));
   queryHistoryButton = Gtk::manage(new class Gtk::Button(_("History")));
   findQueryButton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-find")));
   
   Gtk::VButtonBox *queryVbuttonbox = Gtk::manage(new class Gtk::VButtonBox(Gtk::BUTTONBOX_START, 0));
   Gtk::HBox *queryHbox = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *queryLabel = Gtk::manage(new class Gtk::Label(_("Stored queries")));
#if GTK_VERSION_GT(2, 3)
   queryExpander = Gtk::manage(new class Gtk::Expander());
#else //
   queryExpander = Gtk::manage(new class Gtk::HandleBox());
#endif //
   rightVbox = Gtk::manage(new class Gtk::VBox(false, 0));
   mainHpaned = Gtk::manage(new class Gtk::HPaned());
   mainProgressbar = Gtk::manage(new class Gtk::ProgressBar());
   mainStatusbar = Gtk::manage(new class Gtk::Statusbar());
   
   Gtk::HBox *mainHbox = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::VBox *mainVbox = Gtk::manage(new class Gtk::VBox(false, 0));
   
   mainMenubar = Gtk::manage(new class Gtk::MenuBar());

   image439->set_alignment(0.5,0.5);
   image439->set_padding(0,0);
#if GTK_VERSION_LT(3, 0)
   addIndexButton->set_flags(Gtk::CAN_FOCUS);
   addIndexButton->set_flags(Gtk::CAN_DEFAULT);
#else
   addIndexButton->set_can_focus();
   addIndexButton->set_can_default();
#endif
   addIndexButton->set_relief(Gtk::RELIEF_NORMAL);
   addIndexButton->add(*image439);
   image438->set_alignment(0.5,0.5);
   image438->set_padding(0,0);
#if GTK_VERSION_LT(3, 0)
   removeIndexButton->set_flags(Gtk::CAN_FOCUS);
   removeIndexButton->set_flags(Gtk::CAN_DEFAULT);
#else
   removeIndexButton->set_can_focus();
   removeIndexButton->set_can_default();
#endif
   removeIndexButton->set_relief(Gtk::RELIEF_NORMAL);
   removeIndexButton->add(*image438);
   indexHbox->pack_start(*addIndexButton);
   indexHbox->pack_start(*removeIndexButton);
   leftVbox->pack_start(*enginesVbox);
   leftVbox->pack_start(*indexHbox, Gtk::PACK_SHRINK, 0);
   image623->set_alignment(0.5,0.5);
   image623->set_padding(0,0);
#if GTK_VERSION_LT(3, 0)
   enginesTogglebutton->set_flags(Gtk::CAN_FOCUS);
#else
   enginesTogglebutton->set_can_focus();
#endif
   enginesTogglebutton->set_relief(Gtk::RELIEF_NORMAL);
   enginesTogglebutton->set_active(false);
   enginesTogglebutton->add(*image623);
   liveQueryLabel->set_alignment(0.5,0.5);
   liveQueryLabel->set_padding(0,0);
   liveQueryLabel->set_justify(Gtk::JUSTIFY_LEFT);
   liveQueryLabel->set_line_wrap(false);
   liveQueryLabel->set_use_markup(false);
   liveQueryLabel->set_selectable(false);
   liveQueryLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
   liveQueryLabel->set_width_chars(-1);
   liveQueryLabel->set_angle(0);
   liveQueryLabel->set_single_line_mode(false);
#if GTK_VERSION_LT(3, 0)
   liveQueryEntry->set_flags(Gtk::CAN_FOCUS);
#else
   liveQueryEntry->set_can_focus();
#endif
   liveQueryEntry->grab_focus();
   liveQueryEntry->set_visibility(true);
   liveQueryEntry->set_editable(true);
   liveQueryEntry->set_max_length(0);
   liveQueryEntry->set_has_frame(true);
   liveQueryEntry->set_activates_default(false);
#if GTK_VERSION_LT(3, 0)
   findButton->set_flags(Gtk::CAN_FOCUS);
   findButton->set_flags(Gtk::CAN_DEFAULT);
#else
   findButton->set_can_focus();
   findButton->set_can_default();
#endif
   findButton->set_relief(Gtk::RELIEF_NORMAL);
   findVbuttonbox->pack_start(*findButton);
   liveQueryHbox->pack_start(*enginesTogglebutton, Gtk::PACK_SHRINK, 4);
   liveQueryHbox->pack_start(*liveQueryLabel, Gtk::PACK_SHRINK, 4);
   liveQueryHbox->pack_start(*liveQueryEntry, Gtk::PACK_EXPAND_WIDGET, 4);
   liveQueryHbox->pack_start(*findVbuttonbox, Gtk::PACK_SHRINK, 4);
   queryTreeview->set_events(Gdk::BUTTON_PRESS_MASK);
#if GTK_VERSION_LT(3, 0)
   queryTreeview->set_flags(Gtk::CAN_FOCUS);
#else
   queryTreeview->set_can_focus();
#endif
   queryTreeview->set_headers_visible(true);
   queryTreeview->set_rules_hint(false);
   queryTreeview->set_reorderable(false);
   queryTreeview->set_enable_search(false);
   queryTreeview->set_fixed_height_mode(false);
   queryTreeview->set_hover_selection(false);
   queryTreeview->set_hover_expand(false);
#if GTK_VERSION_LT(3, 0)
   queryScrolledwindow->set_flags(Gtk::CAN_FOCUS);
#else
   queryScrolledwindow->set_can_focus();
#endif
   queryScrolledwindow->set_shadow_type(Gtk::SHADOW_NONE);
   queryScrolledwindow->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   queryScrolledwindow->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   queryScrolledwindow->add(*queryTreeview);
#if GTK_VERSION_LT(3, 0)
   addQueryButton->set_flags(Gtk::CAN_FOCUS);
   addQueryButton->set_flags(Gtk::CAN_DEFAULT);
#else
   addQueryButton->set_can_focus();
   addQueryButton->set_can_default();
#endif
   addQueryButton->set_border_width(4);
   addQueryButton->set_relief(Gtk::RELIEF_NORMAL);
#if GTK_VERSION_LT(3, 0)
   removeQueryButton->set_flags(Gtk::CAN_FOCUS);
   removeQueryButton->set_flags(Gtk::CAN_DEFAULT);
#else
   removeQueryButton->set_can_focus();
   removeQueryButton->set_can_default();
#endif
   removeQueryButton->set_border_width(4);
   removeQueryButton->set_relief(Gtk::RELIEF_NORMAL);
#if GTK_VERSION_LT(3, 0)
   queryHistoryButton->set_flags(Gtk::CAN_FOCUS);
   queryHistoryButton->set_flags(Gtk::CAN_DEFAULT);
#else
   queryHistoryButton->set_can_focus();
   queryHistoryButton->set_can_default();
#endif
   queryHistoryButton->set_border_width(4);
   queryHistoryButton->set_relief(Gtk::RELIEF_NORMAL);
#if GTK_VERSION_LT(3, 0)
   findQueryButton->set_flags(Gtk::CAN_FOCUS);
   findQueryButton->set_flags(Gtk::CAN_DEFAULT);
#else
   findQueryButton->set_can_focus();
   findQueryButton->set_can_default();
#endif
   findQueryButton->set_border_width(4);
   findQueryButton->set_relief(Gtk::RELIEF_NORMAL);
   queryVbuttonbox->pack_start(*addQueryButton);
   queryVbuttonbox->pack_start(*removeQueryButton);
   queryVbuttonbox->pack_start(*queryHistoryButton);
   queryVbuttonbox->pack_start(*findQueryButton);
   queryHbox->pack_start(*queryScrolledwindow);
   queryHbox->pack_start(*queryVbuttonbox, Gtk::PACK_SHRINK, 0);
   queryLabel->set_alignment(0.5,0.5);
   queryLabel->set_padding(0,0);
   queryLabel->set_justify(Gtk::JUSTIFY_LEFT);
   queryLabel->set_line_wrap(false);
   queryLabel->set_use_markup(false);
   queryLabel->set_selectable(false);
   queryLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
   queryLabel->set_width_chars(-1);
   queryLabel->set_angle(0);
   queryLabel->set_single_line_mode(false);
#if GTK_VERSION_LT(3, 0)
   queryExpander->set_flags(Gtk::CAN_FOCUS);
#else
   queryExpander->set_can_focus();
#endif
   queryExpander->set_expanded(false);
   queryExpander->set_spacing(0);
   queryExpander->add(*queryHbox);
   queryExpander->set_label_widget(*queryLabel);
   rightVbox->pack_start(*liveQueryHbox, Gtk::PACK_SHRINK, 0);
   rightVbox->pack_start(*queryExpander, Gtk::PACK_SHRINK, 0);
#if GTK_VERSION_LT(3, 0)
   mainHpaned->set_flags(Gtk::CAN_FOCUS);
#else
   mainHpaned->set_can_focus();
#endif
   mainHpaned->set_position(200);
   mainHpaned->pack1(*leftVbox, Gtk::SHRINK);
   mainHpaned->pack2(*rightVbox, Gtk::EXPAND|Gtk::SHRINK);
   mainHbox->pack_start(*mainProgressbar, Gtk::PACK_SHRINK, 0);
   mainHbox->pack_start(*mainStatusbar);
   mainVbox->pack_start(*mainMenubar, Gtk::PACK_SHRINK, 0);
   mainVbox->pack_start(*mainHpaned, Gtk::PACK_EXPAND_WIDGET, 4);
   mainVbox->pack_start(*mainHbox, Gtk::PACK_SHRINK, 0);
   mainWindow->set_events(Gdk::BUTTON_PRESS_MASK);
   mainWindow->set_title(_("Pinot"));
   mainWindow->set_default_size(680,500);
   mainWindow->set_modal(false);
   mainWindow->property_window_position().set_value(Gtk::WIN_POS_NONE);
   mainWindow->set_resizable(true);
   mainWindow->property_destroy_with_parent().set_value(false);
   mainWindow->add(*mainVbox);
   mainMenubar->show();
   enginesVbox->show();
   image439->show();
   addIndexButton->show();
   image438->show();
   removeIndexButton->show();
   indexHbox->show();
   image623->show();
   enginesTogglebutton->show();
   liveQueryLabel->show();
   liveQueryEntry->show();
   findButton->show();
   liveQueryHbox->show();
   queryTreeview->show();
   queryScrolledwindow->show();
   addQueryButton->show();
   removeQueryButton->show();
   queryHistoryButton->show();
   findQueryButton->show();
   queryVbuttonbox->show();
   queryHbox->show();
   queryLabel->show();
   queryExpander->show();
   rightVbox->show();
   mainHpaned->show();
   mainProgressbar->show();
   mainStatusbar->show();
   mainHbox->show();
   mainVbox->show();
   addIndexButton->signal_clicked().connect(sigc::mem_fun(*this, &mainWindow_glade::on_addIndexButton_clicked), false);
   removeIndexButton->signal_clicked().connect(sigc::mem_fun(*this, &mainWindow_glade::on_removeIndexButton_clicked), false);
   enginesTogglebutton->signal_toggled().connect(sigc::mem_fun(*this, &mainWindow_glade::on_enginesTogglebutton_toggled), false);
   liveQueryEntry->signal_changed().connect(sigc::mem_fun(*this, &mainWindow_glade::on_liveQueryEntry_changed), false);
   liveQueryEntry->signal_activate().connect(sigc::mem_fun(*this, &mainWindow_glade::on_liveQueryEntry_activate), false);
   findButton->signal_clicked().connect(sigc::mem_fun(*this, &mainWindow_glade::on_findButton_clicked), false);
   queryTreeview->signal_button_press_event().connect(sigc::mem_fun(*this, &mainWindow_glade::on_queryTreeview_button_press_event), false);
   addQueryButton->signal_clicked().connect(sigc::mem_fun(*this, &mainWindow_glade::on_addQueryButton_clicked), false);
   removeQueryButton->signal_clicked().connect(sigc::mem_fun(*this, &mainWindow_glade::on_removeQueryButton_clicked), false);
   queryHistoryButton->signal_clicked().connect(sigc::mem_fun(*this, &mainWindow_glade::on_queryHistoryButton_clicked), false);
   findQueryButton->signal_clicked().connect(sigc::mem_fun(*this, &mainWindow_glade::on_findQueryButton_clicked), false);
   mainWindow->signal_delete_event().connect(sigc::mem_fun(*this, &mainWindow_glade::on_mainWindow_delete_event), false);
}

mainWindow_glade::~mainWindow_glade()
{  delete gmm_data;
}
